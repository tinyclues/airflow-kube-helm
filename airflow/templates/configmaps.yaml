apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-init
  labels:
    app: {{ template "airflow.name" . }}
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  init-airflow.sh: |
    echo "INIT AIRFLOW"
---
{{- if .Values.airflow.dags.persistence.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-init-dags
  labels:
    app: {{ template "airflow.name" . }}
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  init-dags.sh: |
{{ tpl (required "A valid .Values.airflow.dags.persistence.init_dags entry required!" .Values.airflow.dags.persistence.init_dags) . | indent 4 }}
---
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-nginx
  labels:
    app: {{ template "airflow.name" . }}
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  nginx.conf: |
    server {
      listen 80;
      server_name _;
      # if ($http_x_forwarded_proto = "http") {
      #     return 301 https://$host$request_uri;
      # }
      location / {
        proxy_set_header X-Forwarded-Proto https;
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }
      location /health {
        return 200 "healthy\n";
        add_header Content-Type text/plain;
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-config
  labels:
    app: {{ template "airflow.name" . }}
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  airflow.cfg: |
    [core]
    airflow_home = /usr/local/airflow
    {{- if .Values.airflow.dags.persistence.enabled }}
    dags_folder = /usr/local/airflow/dags
    {{- else }}
    dags_folder = /usr/local/airflow/dags/repo/{{ .Values.airflow.dags.git.subpath }}
    {{- end }}
    base_log_folder = /usr/local/airflow/logs
    executor = KubernetesExecutor
    plugins_folder = /usr/local/airflow/plugins
    sql_alchemy_conn = $sql_alchemy_conn

    [scheduler]
    child_process_log_directory = /usr/local/airflow/logs/scheduler

    [webserver]
    rbac = {{ .Values.airflow.rbac.enabled }}

    [kubernetes]
    airflow_configmap = airflow-config
    worker_container_repository = {{ .Values.airflow.image.repository }}
    worker_container_tag = {{ .Values.airflow.image.tag }}
    worker_container_image_pull_policy = {{ .Values.airflow.image.pull_policy }}
    worker_dags_folder = /usr/local/airflow/dags
    delete_worker_pods = true
    {{- if .Values.airflow.dags.persistence.enabled }}
    {{- if .Values.airflow.dags.persistence.existingClaim }}
    dags_volume_claim = {{ .Values.airflow.dags.persistence.existingClaim }}
    dags_volume_subpath = {{ .Values.airflow.dags.persistence.existingClaimSubPath }}
    {{- else }}
    dags_volume_claim = airflow-dags
    dags_volume_subpath =
    {{- end }}
    {{- else }}
    git_repo = {{ .Values.airflow.dags.git.url }}
    git_branch = {{ .Values.airflow.dags.git.branch }}
    git_subpath = {{ .Values.airflow.dags.git.subpath }}
    git_dags_folder_mount_point = /usr/local/airflow/dags
    {{- end }}
    {{- if .Values.airflow.logs.persistence.existingClaim }}
    logs_volume_claim = {{ .Values.airflow.logs.persistence.existingClaim }}
    logs_volume_subpath = {{ .Values.airflow.logs.persistence.existingClaimSubPath }}
    {{- else }}
    logs_volume_claim = airflow-logs
    logs_volume_subpath =
    {{- end }}

    in_cluster = true
    namespace = {{ .Release.Namespace }}

    # for cloning dags from git repositories into volumes: https://github.com/kubernetes/git-sync
    git_sync_container_repository = k8s.gcr.io/git-sync
    git_sync_container_tag = v3.0.1
    git_sync_init_container_name = git-sync-clone

    [kubernetes_node_selectors]
    # the key-value pairs to be given to worker pods.
    # the worker pods will be scheduled to the nodes of the specified key-value pairs.
    # should be supplied in the format: key = value

    [kubernetes_secrets]
    AIRFLOW__CORE__SQL_ALCHEMY_CONN = airflow-env=AIRFLOW__CORE__SQL_ALCHEMY_CONN
    AIRFLOW_HOME = airflow-env=AIRFLOW_HOME
    {{- range $setting, $option := .Values.airflow.config }}
    {{ $setting }} = airflow-env={{ $setting }}
    {{- end }}

    [cli]
    api_client = airflow.api.client.json_client
    endpoint_url = https://airflow.crunchanalytics.cloud

    [api]
    auth_backend = airflow.api.auth.backend.default

    [admin]
    # ui to hide sensitive variable fields when set to true
    hide_sensitive_variable_fields = true
